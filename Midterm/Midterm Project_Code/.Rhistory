# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
# Use libraries
library(ezids)
library(knitr)
library(magrittr)
library(dplyr)
library(purrr)
library(tidyr)
library(stringr)
library(ggplot2)
# Load Data
midterm = data.frame(read.csv("dataset/train.csv"))
# Use "January"
midterm2 = subset(midterm, Month=="January")
kable(midterm2[1:5,], "pipe")
data.frame(variable = names(midterm2),
classe = sapply(midterm2, typeof),
first_values = sapply(midterm2, function(x) paste0(head(x),  collapse = ", ")),
row.names = NULL) %>%
kable()
xkabledply(summary(midterm2))
### for the future analysis
#midterm2_subset <- midterm2[ , names(midterm2) %in% c("ID", "Name", "Age", "Annual_Income", "Num_Bank_Accounts", "Num_Credit_Card", "Interest_Rate", "Num_of_Loan", "Num_of_Delayed_Payment", "Credit_Mix", "Total_EMI_per_month", "Monthly_Balance", "Credit_Score")]
#str(midterm2_subset)
#summary(midterm2_subset)
#nrow(midterm2_subset)
# Subset Data including 5 variables
midterm2_subset <- midterm2[ , names(midterm2) %in% c("Age", "Num_of_Delayed_Payment", "Credit_Mix", "Total_EMI_per_month", "Credit_Score")]
# "Age"
# Removed Special Characters & Changed the data type into "int"
midterm2_subset$Age <- gsub("[[:punct:]]", "", midterm2_subset$Age)
midterm2_subset$Age <- as.integer(midterm2_subset$Age)
### for the future analysis
# "Annual_Income"
# Removed Special Characters & Changed the data type into "num" & Rounded
# midterm2_subset$Annual_Income <- as.numeric(sub("_", "", midterm2_subset$Annual_Income))
# "Num_of_Delayed_Payment"
# Removed Special Characters & Changed the data type from "char" to "int"
midterm2_subset$Num_of_Delayed_Payment <- gsub("[[:punct:]]", "", midterm2_subset$Num_of_Delayed_Payment)
midterm2_subset$Num_of_Delayed_Payment <- as.integer(midterm2_subset$Num_of_Delayed_Payment)
### for the future analysis
# "Num_of_Loan"
# Removed Special Characters & Changed the data type from "char" to "int"
# midterm2_subset$Num_of_Loan <- gsub("[[:punct:]]", "", midterm2_subset$Num_of_Loan)
# midterm2_subset$Num_of_Loan <- as.integer(midterm2_subset$Num_of_Loan)
# "Num_of_Loan"
# Removed value below 0
# midterm2_subset <- midterm2_subset[midterm2_subset['Num_of_Loan'] >= 0, ]
# "Credit_Mix"
# Removed Special Characters
# Converted "char" into "int" from "Good" to 3, "Standard" to 2, and "Bad" to 1
midterm2_subset <- midterm2_subset[midterm2_subset['Credit_Mix'] != "_",]
midterm2_subset$Credit_Mix[midterm2_subset$Credit_Mix == 'Bad'] <- 1
midterm2_subset$Credit_Mix[midterm2_subset$Credit_Mix == 'Standard'] <- 2
midterm2_subset$Credit_Mix[midterm2_subset$Credit_Mix == 'Good'] <- 3
midterm2_subset$Credit_Mix <- as.integer(midterm2_subset$Credit_Mix)
# Rounded "Total_EMI_per_month"
midterm2_subset["Total_EMI_per_month"] <-
round(midterm2_subset["Total_EMI_per_month"], digits = 2)
# "Credit_score"
# Removed Special Characters
midterm2_subset <- midterm2_subset[midterm2_subset['Credit_Score'] != "_",]
# Convert Credit Score into Factor Variable\
midterm2_subset$Credit_Score <- factor(midterm2_subset$Credit_Score , levels=c('Poor', 'Standard', 'Good'))
### for the future analysis
# "Monthly_Balance"
# Converted into "int" and rounded
# midterm2_subset$Monthly_Balance <- as.integer(midterm2_subset$Monthly_Balance)
# midterm2_subset["Monthly_Balance"] <- round(midterm2_subset["Monthly_Balance"], digits = 2)
# Removed NA from data
midterm2_subset = na.omit(midterm2_subset)
# Filtered out a group age under 18 and greater than 100
midterm2_subset<-midterm2_subset[(midterm2_subset$Age > 17) & (midterm2_subset$Age < 100),]
df = outlierKD2(midterm2_subset, Num_of_Delayed_Payment, rm=T)
df = outlierKD2(df, Total_EMI_per_month, rm=T)
df = outlierKD2(df, Age, rm=T)
data.frame(variable = names(df),
classe = sapply(df, typeof),
first_values = sapply(df, function(x) paste0(head(x),  collapse = ", ")),
row.names = NULL) %>%
kable()
xkabledply(summary(df))
### for the future analysis
#midterm2_subset <- midterm2[ , names(midterm2) %in% c("ID", "Name", "Age", "Annual_Income", "Num_Bank_Accounts", "Num_Credit_Card", "Interest_Rate", "Num_of_Loan", "Num_of_Delayed_Payment", "Credit_Mix", "Total_EMI_per_month", "Monthly_Balance", "Credit_Score")]
#str(midterm2_subset)
#summary(midterm2_subset)
#nrow(midterm2_subset)
ggplot(df, aes(x=Credit_Mix, fill = Credit_Score)) + geom_histogram(binwidth = 1) + ggtitle ("Credit_Mix") + xlab("Credit_Mix") + ylab("Total count")
# The Chi-square test of independence
# check whether Credit_Mix and Credit_Score are likely to be related or not
# The independence test tells us only whether there is a relationship or not; it does not tell us that one variable causes the other
mix = table(df$Credit_Mix, df$Credit_Score)
rownames(mix) <- c("Bad","Standard","Good")
xkabledply(mix, title="Contingency table for Credit_Mix vs Credit_Score")
chitest = chisq.test(mix)
print(chitest)
# expected values
xkabledply(chitest$expected, title = "Cross table for the expected frequencies between Credit_Mix and Credit_Score")
#str(df)
#summary(df)
#xkabledply(summary(df), title = "Summary of the Refined Dataset")
Poor = subset(df, df$Credit_Score == 'Poor')
summary(Poor)
Standard = subset(df, df$Credit_Score == 'Standard')
summary(Standard)
Good = subset(df, df$Credit_Score == 'Good')
summary(Good)
# Construct t-intervals for the Number of Delayed Payment
# All Groups
delay_All = t.test(x=df$Num_of_Delayed_Payment)
delay_All
# Poor Group
delay_Poor = t.test(x=Poor$Num_of_Delayed_Payment)
delay_Poor
# Standard Group
delay_Standard = t.test(x=Standard$Num_of_Delayed_Payment)
delay_Standard
# Good Group
delay_Good = t.test(x=Good$Num_of_Delayed_Payment)
delay_Good
ggplot(df, aes(x=Credit_Score, y=Num_of_Delayed_Payment)) + geom_boxplot( colour=c("red","green","blue")) +
labs(title="Boxplot of the Number of Delayed Payment with different Credit Scores", x="Credit Score", y = "Number of Delayed Payment")
# All Groups by colors
ggplot(df, aes(x=Num_of_Delayed_Payment, fill = Credit_Score)) + geom_histogram(binwidth = 1) + ggtitle ("Histogram of the Number of Delayed Payment") + xlab("Number of Delayed Payment") + ylab("Total count")
# All Groups
ggplot(df, aes(Num_of_Delayed_Payment)) + geom_histogram(fill="yellow") + ggtitle("Histogram of the Number of Delayed Payment")
# Poor Group
ggplot(Poor, aes(Num_of_Delayed_Payment)) + geom_histogram(fill="red") + ggtitle("Histogram of the Number of Delayed Payment in Poor Credit Score Group") + xlab("Number of Delayed Payment in Poor Group")
# Standard Group
ggplot(Standard, aes(Num_of_Delayed_Payment)) + geom_histogram(fill="green") + ggtitle("Histogram of Number of Delayed Payment in Standard Credit Score Group") + xlab("Number of Delayed Payment in Standard Group")
# Good Group
ggplot(Good, aes(Num_of_Delayed_Payment)) + geom_histogram(fill="blue") + ggtitle("Histogram of Number of Delayed Payment in Good Credit Score Group") + xlab("Number of Delayed Payment in Good Group")
## Check for normality on the Number of Delayed Payment, a numerical variable by using histogram and QQ-plot
# All Group
qqnorm(df$Num_of_Delayed_Payment, col="dodgerblue2", main="QQ-plot of the Number of Delayed Payment")
qqline(df$Num_of_Delayed_Payment)
# Poor Group
qqnorm(Poor$Num_of_Delayed_Payment, col="red", main="QQ-plot of the Number of Delayed Payment in Poor Credit Score Group")
qqline(Poor$Num_of_Delayed_Payment)
# Standard Group
qqnorm(Poor$Num_of_Delayed_Payment, col="green", main="QQ-plot of the Number of Delayed Payment in Standard Credit Score Group")
qqline(Poor$Num_of_Delayed_Payment)
# Good Group
qqnorm(Poor$Num_of_Delayed_Payment, col="blue", main="QQ-plot of the Number of Delayed Payment in Good Credit Score Group")
qqline(Poor$Num_of_Delayed_Payment)
# Does the three subgroups have different the Number of Delayed Payment average?
anova_delayed = aov(Num_of_Delayed_Payment ~ Credit_Score, data=df)
anova_delayed
names(anova_delayed)
xkabledply(anova_delayed, title = "ANOVA result summary the Number of Delayed Payment between Credit Score")
# Since they are not all the same, we need to follow up with a post-hoc test.
tukeyAoV <- TukeyHSD(anova_delayed)
tukeyAoV
# EDA for Total EMI
zero_emi <- subset(df, Total_EMI_per_month == 0)
str(zero_emi)
non_zero_emi <- subset(df, Total_EMI_per_month != 0)
Total_Emi = t.test(x=df$Total_EMI_per_month)
Total_Emi
non_zero_emi_t = t.test(x=non_zero_emi$Total_EMI_per_month)
non_zero_emi_t
ggplot(df, aes(x=Credit_Score, y=Total_EMI_per_month)) + geom_boxplot( colour=c("red","green","blue")) +
labs(title="Boxplot of the Total EMI per month with different Credit Scores", x="Credit Score", y = "Number Total_EMI_per_month")
# ggplot(non_zero_emi, aes(x=Credit_Score, y=Total_EMI_per_month)) + geom_boxplot( colour=c("red","green","blue")) +
#labs(title="Boxplot of the Total EMI per month with different Credit Scores", x="Credit Score", y = "Number Total_EMI_per_month Delayed Payment for Non Zero Group")
# All Groups by colors
ggplot(df, aes(x=Total_EMI_per_month, fill = Credit_Score)) + geom_histogram(binwidth = 1) + ggtitle ("Histogram of the Total EMI per Month") + xlab("Total EMI per Month") + ylab("Total count")
# EMI Zero Group
ggplot(zero_emi, aes(x=Total_EMI_per_month, fill = Credit_Score)) + geom_histogram(binwidth = 1) + ggtitle ("Histogram of the Total EMI per Month") + xlab("Total EMI per Month") + ylab("Total count")
# EMI Non-Zero Group
ggplot(non_zero_emi, aes(x=Total_EMI_per_month, fill = Credit_Score)) + geom_histogram(binwidth = 1) + ggtitle ("Histogram of the Total EMI per Month") + xlab("Total EMI per Month") + ylab("Total count")
# All Group
qqnorm(df$Total_EMI_per_month, col="dodgerblue2", main="QQ-plot of the Total EMI per month")
qqline(df$Total_EMI_per_month)
# Zero EMI Group
qqnorm(zero_emi$Total_EMI_per_month, col="red", main="QQ-plot of the Total EMI per month in zero EMI Group")
qqline(zero_emi$Total_EMI_per_month)
# Non zero Group
qqnorm(non_zero_emi$Total_EMI_per_month, col="green", main="QQ-plot of the Total EMI per month in non zero EMI Group")
qqline(non_zero_emi$Total_EMI_per_month)
# Does the three subgroups have different the Number of Delayed Payment average?
# All Group
anova_toal_emi = aov(Total_EMI_per_month ~ Credit_Score, data=df)
anova_toal_emi
names(anova_toal_emi)
xkabledply(anova_toal_emi, title = "ANOVA result summary total EMI per month between Credit Score")
# Non Zero Group
anova_nonzero_emi = aov(Total_EMI_per_month ~ Credit_Score, data=non_zero_emi)
anova_nonzero_emi
names(anova_nonzero_emi)
xkabledply(anova_nonzero_emi, title = "ANOVA result summary total EMI per month between Credit Score")
# Since they are not all the same, we need to follow up with a post-hoc test.
# All group
tukeyAoVemi_All <- TukeyHSD(anova_toal_emi)
tukeyAoVemi_All
tukeyAoVemi_NonEMI <- TukeyHSD(anova_nonzero_emi)
tukeyAoVemi_NonEMI
# library(VGAM)
# All Groups
ggplot(df, aes(x=Age, fill = Credit_Score)) + geom_histogram(bins=8) + ggtitle ("Histogram of the Age") + xlab("Age") + ylab("Total count")
# Poor Group
ggplot(df[df['Credit_Score']=='Poor',], aes(Age)) + geom_histogram(fill="red",bins = 8) + ggtitle("Histogram of the Age in Poor Credit Score Group") + xlab("Age in Poor Group")
# Standard Group
ggplot(df[df['Credit_Score']=='Standard',], aes(Age)) + geom_histogram(fill="green",bins = 8) + ggtitle("Histogram of Age in Standard Credit Score Group") + xlab("Age in Standard Group")
# Good Group
ggplot(df[df['Credit_Score']=='Good',], aes(Age)) + geom_histogram(fill="blue",bins=8) + ggtitle("Histogram of Age in Good Credit Score Group") + xlab("Age in Good Group")
ggplot(df, aes(x=Credit_Score, y=Age)) + geom_boxplot( colour=c("red","green","blue")) +
labs(title="Boxplot of the Age", x="Credit Score", y = "Age")
anova_delayed1 = aov(Age ~ Credit_Score, data=df)
anova_delayed1
names(anova_delayed1)
xkabledply(anova_delayed1, title = "ANOVA result summary the Age between Credit Score")
tukeyAoV1 <- TukeyHSD(anova_delayed)
tukeyAoV1
